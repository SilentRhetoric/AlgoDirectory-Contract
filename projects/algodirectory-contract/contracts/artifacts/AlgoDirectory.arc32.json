{
  "hints": {
    "createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "abandonListing(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteListing(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "setAdminToken(uint64)void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {
        "adminToken": {
          "type": "uint64",
          "key": "adminToken"
        }
      },
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 1
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AlgoDirectory",
    "desc": "",
    "methods": [
      {
        "name": "createListing",
        "desc": "Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.",
        "args": [
          {
            "name": "collateralPayment",
            "type": "pay",
            "desc": "The Algo payment of collateral to vouch for the listing"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be listed"
          },
          {
            "name": "listingTags",
            "type": "byte[13]",
            "desc": "Array of 13 bytes each representing a tag for the listing"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,byte[13],string)"
        }
      },
      {
        "name": "refreshListing",
        "desc": "Refreshes a listing in the directory and updates its last touched timestamp.",
        "args": [
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be refreshed"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,byte[13],string)"
        }
      },
      {
        "name": "abandonListing",
        "desc": "Abandons a listing in the directory and returns the vouched collateral.",
        "args": [
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be abandoned"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteListing",
        "desc": "Deletes a listing from the directory & sends the collateral to the fee sink.",
        "args": [
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be deleted"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "setAdminToken",
        "desc": "Stores an ASA ID in global state that will control administration rights",
        "args": [
          {
            "name": "asaID",
            "type": "uint64",
            "desc": "The uint64 asset ID of the ASA to be the admin token"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}