{
  "hints": {
    "createListing(pay,uint64,byte[10])void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "refreshListing((uint64,uint64,uint64,byte[10],bool,string))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "abandonListing((uint64,uint64,uint64,byte[10],bool,string))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteListing((uint64,uint64,uint64,byte[10],bool,string))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AlgoDirectory",
    "desc": "",
    "methods": [
      {
        "name": "createListing",
        "desc": "Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.",
        "args": [
          {
            "name": "collateralPayment",
            "type": "pay",
            "desc": "The Algo payment of collateral to vouch for the listing"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be listed"
          },
          {
            "name": "listingTags",
            "type": "byte[10]"
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "refreshListing",
        "desc": "Refreshes a listing in the directory and updates its last touched timestamp.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[10],bool,string)",
            "desc": "The box key of the listing to refresh with the current timestamp."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "abandonListing",
        "desc": "Abandons a listing in the directory and returns the vouched collateral.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[10],bool,string)",
            "desc": "The box key of the listing to abandon and reclaim collateral."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteListing",
        "desc": "Deletes a listing from the directory & sends the collateral to the fee sink.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[10],bool,string)",
            "desc": "The box key of the listing to delete."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}