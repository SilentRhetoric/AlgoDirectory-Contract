/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^2
 */
import * as algokit from '@algorandfoundation/algokit-utils'
import type {
  ABIAppCallArg,
  AppCallTransactionResult,
  AppCallTransactionResultOfType,
  AppCompilationResult,
  AppReference,
  AppState,
  AppStorageSchema,
  CoreAppCallArgs,
  RawAppCallArgs,
  TealTemplateParams,
} from '@algorandfoundation/algokit-utils/types/app'
import type {
  AppClientCallCoreParams,
  AppClientCompilationParams,
  AppClientDeployCoreParams,
  AppDetails,
  ApplicationClient,
} from '@algorandfoundation/algokit-utils/types/app-client'
import type { AppSpec } from '@algorandfoundation/algokit-utils/types/app-spec'
import type { SendTransactionResult, TransactionToSign, SendTransactionFrom, SendTransactionParams } from '@algorandfoundation/algokit-utils/types/transaction'
import type { ABIResult, TransactionWithSigner } from 'algosdk'
import { Algodv2, OnApplicationComplete, Transaction, AtomicTransactionComposer, modelsv2 } from 'algosdk'
export const APP_SPEC: AppSpec = {
  "hints": {
    "createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "refreshListing((uint64,uint64,uint64,byte[13],byte[]))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "abandonListing((uint64,uint64,uint64,byte[13],byte[]))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "deleteListing((uint64,uint64,uint64,byte[13],byte[]))void": {
      "call_config": {
        "no_op": "CALL"
      }
    },
    "updateApplication()void": {
      "call_config": {
        "update_application": "CALL"
      }
    },
    "createApplication()void": {
      "call_config": {
        "no_op": "CREATE"
      }
    }
  },
  "bare_call_config": {
    "no_op": "NEVER",
    "opt_in": "NEVER",
    "close_out": "NEVER",
    "update_application": "NEVER",
    "delete_application": "NEVER"
  },
  "schema": {
    "local": {
      "declared": {},
      "reserved": {}
    },
    "global": {
      "declared": {},
      "reserved": {}
    }
  },
  "state": {
    "global": {
      "num_byte_slices": 0,
      "num_uints": 0
    },
    "local": {
      "num_byte_slices": 0,
      "num_uints": 0
    }
  },
  "source": {
    "approval": "",
    "clear": "I3ByYWdtYSB2ZXJzaW9uIDEw"
  },
  "contract": {
    "name": "AlgoDirectory",
    "desc": "",
    "methods": [
      {
        "name": "createListing",
        "desc": "Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.",
        "args": [
          {
            "name": "collateralPayment",
            "type": "pay",
            "desc": "The Algo payment of collateral to vouch for the listing"
          },
          {
            "name": "nfdAppID",
            "type": "uint64",
            "desc": "The uint64 application ID of the NFD that will be listed"
          },
          {
            "name": "listingTags",
            "type": "byte[13]"
          }
        ],
        "returns": {
          "type": "(uint64,uint64,uint64,byte[13],byte[])"
        }
      },
      {
        "name": "refreshListing",
        "desc": "Refreshes a listing in the directory and updates its last touched timestamp.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[13],byte[])",
            "desc": "The box key of the listing to refresh with the current timestamp."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "abandonListing",
        "desc": "Abandons a listing in the directory and returns the vouched collateral.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[13],byte[])",
            "desc": "The box key of the listing to abandon and reclaim collateral."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "deleteListing",
        "desc": "Deletes a listing from the directory & sends the collateral to the fee sink.",
        "args": [
          {
            "name": "listingKey",
            "type": "(uint64,uint64,uint64,byte[13],byte[])",
            "desc": "The box key of the listing to delete."
          }
        ],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "updateApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      },
      {
        "name": "createApplication",
        "args": [],
        "returns": {
          "type": "void"
        }
      }
    ]
  }
}

/**
 * Defines an onCompletionAction of 'no_op'
 */
export type OnCompleteNoOp =  { onCompleteAction?: 'no_op' | OnApplicationComplete.NoOpOC }
/**
 * Defines an onCompletionAction of 'opt_in'
 */
export type OnCompleteOptIn =  { onCompleteAction: 'opt_in' | OnApplicationComplete.OptInOC }
/**
 * Defines an onCompletionAction of 'close_out'
 */
export type OnCompleteCloseOut =  { onCompleteAction: 'close_out' | OnApplicationComplete.CloseOutOC }
/**
 * Defines an onCompletionAction of 'delete_application'
 */
export type OnCompleteDelApp =  { onCompleteAction: 'delete_application' | OnApplicationComplete.DeleteApplicationOC }
/**
 * Defines an onCompletionAction of 'update_application'
 */
export type OnCompleteUpdApp =  { onCompleteAction: 'update_application' | OnApplicationComplete.UpdateApplicationOC }
/**
 * A state record containing a single unsigned integer
 */
export type IntegerState = {
  /**
   * Gets the state value as a BigInt.
   */
  asBigInt(): bigint
  /**
   * Gets the state value as a number.
   */
  asNumber(): number
}
/**
 * A state record containing binary data
 */
export type BinaryState = {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array
  /**
   * Gets the state value as a string
   */
  asString(): string
}

export type AppCreateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult> & AppReference
export type AppUpdateCallTransactionResult = AppCallTransactionResult & Partial<AppCompilationResult>

export type AppClientComposeCallCoreParams = Omit<AppClientCallCoreParams, 'sendParams'> & {
  sendParams?: Omit<SendTransactionParams, 'skipSending' | 'atc' | 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources'>
}
export type AppClientComposeExecuteParams = Pick<SendTransactionParams, 'skipWaiting' | 'maxRoundsToWaitForConfirmation' | 'populateAppCallResources' | 'suppressLog'>

export type IncludeSchema = {
  /**
   * Any overrides for the storage schema to request for the created app; by default the schema indicated by the app spec is used.
   */
  schema?: Partial<AppStorageSchema>
}

/**
 * Defines the types of available calls and state of the AlgoDirectory smart contract.
 */
export type AlgoDirectory = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])' | 'createListing', {
      argsObj: {
        /**
         * The Algo payment of collateral to vouch for the listing
         */
        collateralPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>
        /**
         * The uint64 application ID of the NFD that will be listed
         */
        nfdAppId: bigint | number
        listingTags: Uint8Array
      }
      argsTuple: [collateralPayment: TransactionToSign | Transaction | Promise<SendTransactionResult>, nfdAppId: bigint | number, listingTags: Uint8Array]
      returns: [bigint, bigint, bigint, Uint8Array, Uint8Array]
    }>
    & Record<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void' | 'refreshListing', {
      argsObj: {
        /**
         * The box key of the listing to refresh with the current timestamp.
         */
        listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]
      }
      argsTuple: [listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]]
      returns: void
    }>
    & Record<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void' | 'abandonListing', {
      argsObj: {
        /**
         * The box key of the listing to abandon and reclaim collateral.
         */
        listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]
      }
      argsTuple: [listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]]
      returns: void
    }>
    & Record<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void' | 'deleteListing', {
      argsObj: {
        /**
         * The box key of the listing to delete.
         */
        listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]
      }
      argsTuple: [listingKey: [bigint | number, bigint | number, bigint | number, Uint8Array, Uint8Array]]
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
}
/**
 * Defines the possible abi call signatures
 */
export type AlgoDirectorySig = keyof AlgoDirectory['methods']
/**
 * Defines an object containing all relevant parameters for a single call to the contract. Where TSignature is undefined, a bare call is made
 */
export type TypedCallParams<TSignature extends AlgoDirectorySig | undefined> = {
  method: TSignature
  methodArgs: TSignature extends undefined ? undefined : Array<ABIAppCallArg | undefined>
} & AppClientCallCoreParams & CoreAppCallArgs
/**
 * Defines the arguments required for a bare call
 */
export type BareCallArgs = Omit<RawAppCallArgs, keyof CoreAppCallArgs>
/**
 * Maps a method signature from the AlgoDirectory smart contract to the method's arguments in either tuple of struct form
 */
export type MethodArgs<TSignature extends AlgoDirectorySig> = AlgoDirectory['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoDirectory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoDirectorySig> = AlgoDirectory['methods'][TSignature]['returns']

/**
 * A factory for available 'create' calls
 */
export type AlgoDirectoryCreateCalls = (typeof AlgoDirectoryCallFactory)['create']
/**
 * Defines supported create methods for this smart contract
 */
export type AlgoDirectoryCreateCallParams =
  | (TypedCallParams<'createApplication()void'> & (OnCompleteNoOp))
/**
 * A factory for available 'update' calls
 */
export type AlgoDirectoryUpdateCalls = (typeof AlgoDirectoryCallFactory)['update']
/**
 * Defines supported update methods for this smart contract
 */
export type AlgoDirectoryUpdateCallParams =
  | TypedCallParams<'updateApplication()void'>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoDirectoryDeployArgs = {
  deployTimeParams?: TealTemplateParams
  /**
   * A delegate which takes a create call factory and returns the create call params for this smart contract
   */
  createCall?: (callFactory: AlgoDirectoryCreateCalls) => AlgoDirectoryCreateCallParams
  /**
   * A delegate which takes a update call factory and returns the update call params for this smart contract
   */
  updateCall?: (callFactory: AlgoDirectoryUpdateCalls) => AlgoDirectoryUpdateCallParams
}


/**
 * Exposes methods for constructing all available smart contract calls
 */
export abstract class AlgoDirectoryCallFactory {
  /**
   * Gets available create call factories
   */
  static get create() {
    return {
      /**
       * Constructs a create call for the AlgoDirectory smart contract using the createApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams & (OnCompleteNoOp) = {}) {
        return {
          method: 'createApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Gets available update call factories
   */
  static get update() {
    return {
      /**
       * Constructs an update call for the AlgoDirectory smart contract using the updateApplication()void ABI method
       *
       * @param args Any args for the contract call
       * @param params Any additional parameters for the call
       * @returns A TypedCallParams object for the call
       */
      updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & CoreAppCallArgs & AppClientCompilationParams = {}) {
        return {
          method: 'updateApplication()void' as const,
          methodArgs: Array.isArray(args) ? args : [],
          ...params,
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[]) ABI method
   *
   * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static createListing(args: MethodArgs<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])' as const,
      methodArgs: Array.isArray(args) ? args : [args.collateralPayment, args.nfdAppId, args.listingTags],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the refreshListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method
   *
   * Refreshes a listing in the directory and updates its last touched timestamp.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static refreshListing(args: MethodArgs<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.listingKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the abandonListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method
   *
   * Abandons a listing in the directory and returns the vouched collateral.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static abandonListing(args: MethodArgs<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.listingKey],
      ...params,
    }
  }
  /**
   * Constructs a no op call for the deleteListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method
   *
   * Deletes a listing from the directory & sends the collateral to the fee sink.
   *
   * @param args Any args for the contract call
   * @param params Any additional parameters for the call
   * @returns A TypedCallParams object for the call
   */
  static deleteListing(args: MethodArgs<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs) {
    return {
      method: 'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void' as const,
      methodArgs: Array.isArray(args) ? args : [args.listingKey],
      ...params,
    }
  }
}

/**
 * A client to make calls to the AlgoDirectory smart contract
 */
export class AlgoDirectoryClient {
  /**
   * The underlying `ApplicationClient` for when you want to have more flexibility
   */
  public readonly appClient: ApplicationClient

  private readonly sender: SendTransactionFrom | undefined

  /**
   * Creates a new instance of `AlgoDirectoryClient`
   *
   * @param appDetails appDetails The details to identify the app to deploy
   * @param algod An algod client instance
   */
  constructor(appDetails: AppDetails, private algod: Algodv2) {
    this.sender = appDetails.sender
    this.appClient = algokit.getAppClient({
      ...appDetails,
      app: APP_SPEC
    }, algod)
  }

  /**
   * Checks for decode errors on the AppCallTransactionResult and maps the return value to the specified generic type
   *
   * @param result The AppCallTransactionResult to be mapped
   * @param returnValueFormatter An optional delegate to format the return value if required
   * @returns The smart contract response with an updated return value
   */
  protected mapReturnValue<TReturn, TResult extends AppCallTransactionResult = AppCallTransactionResult>(result: AppCallTransactionResult, returnValueFormatter?: (value: any) => TReturn): AppCallTransactionResultOfType<TReturn> & TResult {
    if(result.return?.decodeError) {
      throw result.return.decodeError
    }
    const returnValue = result.return?.returnValue !== undefined && returnValueFormatter !== undefined
      ? returnValueFormatter(result.return.returnValue)
      : result.return?.returnValue as TReturn | undefined
      return { ...result, return: returnValue } as AppCallTransactionResultOfType<TReturn> & TResult
  }

  /**
   * Calls the ABI method with the matching signature using an onCompletion code of NO_OP
   *
   * @param typedCallParams An object containing the method signature, args, and any other relevant parameters
   * @param returnValueFormatter An optional delegate which when provided will be used to map non-undefined return values to the target type
   * @returns The result of the smart contract call
   */
  public async call<TSignature extends keyof AlgoDirectory['methods']>(typedCallParams: TypedCallParams<TSignature>, returnValueFormatter?: (value: any) => MethodReturn<TSignature>) {
    return this.mapReturnValue<MethodReturn<TSignature>>(await this.appClient.call(typedCallParams), returnValueFormatter)
  }

  /**
   * Idempotently deploys the AlgoDirectory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public deploy(params: AlgoDirectoryDeployArgs & AppClientDeployCoreParams & IncludeSchema = {}): ReturnType<ApplicationClient['deploy']> {
    const createArgs = params.createCall?.(AlgoDirectoryCallFactory.create)
    const updateArgs = params.updateCall?.(AlgoDirectoryCallFactory.update)
    return this.appClient.deploy({
      ...params,
      updateArgs,
      createArgs,
      createOnCompleteAction: createArgs?.onCompleteAction,
    })
  }

  /**
   * Gets available create methods
   */
  public get create() {
    const $this = this
    return {
      /**
       * Creates a new instance of the AlgoDirectory smart contract using the createApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The create result
       */
      async createApplication(args: MethodArgs<'createApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & IncludeSchema & CoreAppCallArgs & (OnCompleteNoOp) = {}) {
        return $this.mapReturnValue<MethodReturn<'createApplication()void'>, AppCreateCallTransactionResult>(await $this.appClient.create(AlgoDirectoryCallFactory.create.createApplication(args, params)))
      },
    }
  }

  /**
   * Gets available update methods
   */
  public get update() {
    const $this = this
    return {
      /**
       * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
       *
       * @param args The arguments for the smart contract call
       * @param params Any additional parameters for the call
       * @returns The update result
       */
      async updateApplication(args: MethodArgs<'updateApplication()void'>, params: AppClientCallCoreParams & AppClientCompilationParams & CoreAppCallArgs = {}) {
        return $this.mapReturnValue<MethodReturn<'updateApplication()void'>, AppUpdateCallTransactionResult>(await $this.appClient.update(AlgoDirectoryCallFactory.update.updateApplication(args, params)))
      },
    }
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The clear_state result
   */
  public clearState(args: BareCallArgs & AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.appClient.clearState(args)
  }

  /**
   * Calls the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[]) ABI method.
   *
   * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public createListing(args: MethodArgs<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoDirectoryCallFactory.createListing(args, params))
  }

  /**
   * Calls the refreshListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Refreshes a listing in the directory and updates its last touched timestamp.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public refreshListing(args: MethodArgs<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoDirectoryCallFactory.refreshListing(args, params))
  }

  /**
   * Calls the abandonListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Abandons a listing in the directory and returns the vouched collateral.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public abandonListing(args: MethodArgs<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoDirectoryCallFactory.abandonListing(args, params))
  }

  /**
   * Calls the deleteListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Deletes a listing from the directory & sends the collateral to the fee sink.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The result of the call
   */
  public deleteListing(args: MethodArgs<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params: AppClientCallCoreParams & CoreAppCallArgs = {}) {
    return this.call(AlgoDirectoryCallFactory.deleteListing(args, params))
  }

  public compose(): AlgoDirectoryComposer {
    const client = this
    const atc = new AtomicTransactionComposer()
    let promiseChain:Promise<unknown> = Promise.resolve()
    const resultMappers: Array<undefined | ((x: any) => any)> = []
    return {
      createListing(args: MethodArgs<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.createListing(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      refreshListing(args: MethodArgs<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.refreshListing(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      abandonListing(args: MethodArgs<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.abandonListing(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      deleteListing(args: MethodArgs<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.deleteListing(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      get update() {
        const $this = this
        return {
          updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams) {
            promiseChain = promiseChain.then(() => client.update.updateApplication(args, {...params, sendParams: {...params?.sendParams, skipSending: true, atc}}))
            resultMappers.push(undefined)
            return $this
          },
        }
      },
      clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs) {
        promiseChain = promiseChain.then(() => client.clearState({...args, sendParams: {...args?.sendParams, skipSending: true, atc}}))
        resultMappers.push(undefined)
        return this
      },
      addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom) {
        promiseChain = promiseChain.then(async () => atc.addTransaction(await algokit.getTransactionWithSigner(txn, defaultSender ?? client.sender)))
        return this
      },
      async atc() {
        await promiseChain
        return atc
      },
      async simulate(options?: SimulateOptions) {
        await promiseChain
        const result = await atc.simulate(client.algod, new modelsv2.SimulateRequest({ txnGroups: [], ...options }))
        return {
          ...result,
          returns: result.methodResults?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      },
      async execute(sendParams?: AppClientComposeExecuteParams) {
        await promiseChain
        const result = await algokit.sendAtomicTransactionComposer({ atc, sendParams }, client.algod)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val.returnValue) : val.returnValue)
        }
      }
    } as unknown as AlgoDirectoryComposer
  }
}
export type AlgoDirectoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[]) ABI method.
   *
   * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createListing(args: MethodArgs<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AlgoDirectoryComposer<[...TReturns, MethodReturn<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],byte[])'>]>

  /**
   * Calls the refreshListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Refreshes a listing in the directory and updates its last touched timestamp.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  refreshListing(args: MethodArgs<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AlgoDirectoryComposer<[...TReturns, MethodReturn<'refreshListing((uint64,uint64,uint64,byte[13],byte[]))void'>]>

  /**
   * Calls the abandonListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Abandons a listing in the directory and returns the vouched collateral.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  abandonListing(args: MethodArgs<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AlgoDirectoryComposer<[...TReturns, MethodReturn<'abandonListing((uint64,uint64,uint64,byte[13],byte[]))void'>]>

  /**
   * Calls the deleteListing((uint64,uint64,uint64,byte[13],byte[]))void ABI method.
   *
   * Deletes a listing from the directory & sends the collateral to the fee sink.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteListing(args: MethodArgs<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void'>, params?: AppClientComposeCallCoreParams & CoreAppCallArgs): AlgoDirectoryComposer<[...TReturns, MethodReturn<'deleteListing((uint64,uint64,uint64,byte[13],byte[]))void'>]>

  /**
   * Gets available update methods
   */
  readonly update: {
    /**
     * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
     *
     * @param args The arguments for the smart contract call
     * @param params Any additional parameters for the call
     * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
     */
    updateApplication(args: MethodArgs<'updateApplication()void'>, params?: AppClientComposeCallCoreParams & AppClientCompilationParams): AlgoDirectoryComposer<[...TReturns, MethodReturn<'updateApplication()void'>]>
  }

  /**
   * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(args?: BareCallArgs & AppClientComposeCallCoreParams & CoreAppCallArgs): AlgoDirectoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn One of: A TransactionWithSigner object (returned as is), a TransactionToSign object (signer is obtained from the signer property), a Transaction object (signer is extracted from the defaultSender parameter), an async SendTransactionResult returned by one of algokit utils helpers (signer is obtained from the defaultSender parameter)
   * @param defaultSender The default sender to be used to obtain a signer where the object provided to the transaction parameter does not include a signer.
   */
  addTransaction(txn: TransactionWithSigner | TransactionToSign | Transaction | Promise<SendTransactionResult>, defaultSender?: SendTransactionFrom): AlgoDirectoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  atc(): Promise<AtomicTransactionComposer>
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AlgoDirectoryComposerSimulateResult<TReturns>>
  /**
   * Executes the transaction group and returns the results
   */
  execute(sendParams?: AppClientComposeExecuteParams): Promise<AlgoDirectoryComposerResults<TReturns>>
}
export type SimulateOptions = Omit<ConstructorParameters<typeof modelsv2.SimulateRequest>[0], 'txnGroups'>
export type AlgoDirectoryComposerSimulateResult<TReturns extends [...any[]]> = {
  returns: TReturns
  methodResults: ABIResult[]
  simulateResponse: modelsv2.SimulateResponse
}
export type AlgoDirectoryComposerResults<TReturns extends [...any[]]> = {
  returns: TReturns
  groupId: string
  txIds: string[]
  transactions: Transaction[]
}
