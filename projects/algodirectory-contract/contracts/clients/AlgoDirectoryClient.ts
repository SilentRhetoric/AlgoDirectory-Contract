/* eslint-disable */
// @ts-nocheck
/**
 * This file was automatically generated by @algorandfoundation/algokit-client-generator.
 * DO NOT MODIFY IT BY HAND.
 * requires: @algorandfoundation/algokit-utils: ^7
 */
import { ABIReturn, AppReturn, SendAppTransactionResult } from '@algorandfoundation/algokit-utils/types/app'
import { Arc56Contract, getArc56ReturnValue } from '@algorandfoundation/algokit-utils/types/app-arc56'
import {
  AppClient,
  AppClientMethodCallParams,
  AppClientParams,
  AppClientBareCallParams,
  CallOnComplete,
  AppClientCompilationParams,
  ResolveAppClientByCreatorAndName,
} from '@algorandfoundation/algokit-utils/types/app-client'
import { AppFactory, AppFactoryDeployParams, AppFactoryParams, CreateSchema } from '@algorandfoundation/algokit-utils/types/app-factory'
import AlgoKitComposer, { AppCallMethodCall, AppMethodCallTransactionArgument, SimulateOptions } from '@algorandfoundation/algokit-utils/types/composer'
import { ExecuteParams, SendSingleTransactionResult, SendAtomicTransactionComposerResults } from '@algorandfoundation/algokit-utils/types/transaction'
import { modelsv2, OnApplicationComplete, Transaction, TransactionSigner } from 'algosdk'
import SimulateResponse = modelsv2.SimulateResponse

export const APP_SPEC: Arc56Contract = {"arcs":[],"name":"AlgoDirectory","desc":"","structs":{},"methods":[{"name":"createListing","desc":"Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.","args":[{"name":"collateralPayment","type":"pay","desc":"The Algo payment of collateral to vouch for the listing"},{"name":"nfdAppID","type":"uint64","desc":"The uint64 application ID of the NFD that will be listed"},{"name":"listingTags","type":"byte[13]","desc":"Array of 13 bytes each representing a tag for the listing"}],"returns":{"type":"(uint64,uint64,uint64,byte[13],string)"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"refreshListing","desc":"Refreshes a listing in the directory and updates its last touched timestamp.","args":[{"name":"nfdAppID","type":"uint64","desc":"The uint64 application ID of the NFD that will be refreshed"}],"returns":{"type":"(uint64,uint64,uint64,byte[13],string)"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"abandonListing","desc":"Abandons a listing in the directory and returns the vouched collateral.","args":[{"name":"nfdAppID","type":"uint64","desc":"The uint64 application ID of the NFD that will be abandoned"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"deleteListing","desc":"Deletes a listing from the directory & sends the collateral to the fee sink.","args":[{"name":"nfdAppID","type":"uint64","desc":"The uint64 application ID of the NFD that will be deleted"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"setAdminToken","desc":"Stores an ASA ID in global state that will control administration rights","args":[{"name":"asaID","type":"uint64","desc":"The uint64 asset ID of the ASA to be the admin token"}],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["NoOp"]}},{"name":"createApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":["NoOp"],"call":[]}},{"name":"updateApplication","args":[],"returns":{"type":"void"},"events":[],"actions":{"create":[],"call":["UpdateApplication"]}}],"state":{"schema":{"global":{"ints":1,"bytes":0},"local":{"ints":0,"bytes":0}},"keys":{"global":{"adminToken":{"key":"YWRtaW5Ub2tlbg==","keyType":"bytes","valueType":"uint64"}},"local":{},"box":{}},"maps":{"global":{},"local":{},"box":{}}},"source":{"approval":"","clear":"I3ByYWdtYSB2ZXJzaW9uIDEw"},"bareActions":{"create":[],"call":[]}}

/**
 * A state record containing binary data
 */
export interface BinaryState {
  /**
   * Gets the state value as a Uint8Array
   */
  asByteArray(): Uint8Array | undefined
  /**
   * Gets the state value as a string
   */
  asString(): string | undefined
}

class BinaryStateValue implements BinaryState {
  constructor(private value: Uint8Array | undefined) {}

  asByteArray(): Uint8Array | undefined {
    return this.value
  }

  asString(): string | undefined {
    return this.value !== undefined ? Buffer.from(this.value).toString('utf-8') : undefined
  }
}

/**
 * Expands types for IntelliSense so they are more human readable
 * See https://stackoverflow.com/a/69288824
 */
export type Expand<T> = T extends (...args: infer A) => infer R
  ? (...args: Expand<A>) => Expand<R>
  : T extends infer O
    ? { [K in keyof O]: O[K] }
    : never


// Aliases for non-encoded ABI values

type pay = AppMethodCallTransactionArgument;
type uint64 = bigint;
type byte = number;
type bytes = Uint8Array;

/**
 * Defines the types of available calls and state of the AlgoDirectory smart contract.
 */
export type AlgoDirectoryTypes = {
  /**
   * Maps method signatures / names to their argument and return types.
   */
  methods:
    & Record<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)' | 'createListing', {
      argsObj: {
        /**
         * The Algo payment of collateral to vouch for the listing
         */
        collateralPayment: AppMethodCallTransactionArgument
        /**
         * The uint64 application ID of the NFD that will be listed
         */
        nfdAppId: bigint | number
        /**
         * Array of 13 bytes each representing a tag for the listing
         */
        listingTags: Uint8Array
      }
      argsTuple: [collateralPayment: AppMethodCallTransactionArgument, nfdAppId: bigint | number, listingTags: Uint8Array]
      returns: [bigint, bigint, bigint, Uint8Array, string]
    }>
    & Record<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)' | 'refreshListing', {
      argsObj: {
        /**
         * The uint64 application ID of the NFD that will be refreshed
         */
        nfdAppId: bigint | number
      }
      argsTuple: [nfdAppId: bigint | number]
      returns: [bigint, bigint, bigint, Uint8Array, string]
    }>
    & Record<'abandonListing(uint64)void' | 'abandonListing', {
      argsObj: {
        /**
         * The uint64 application ID of the NFD that will be abandoned
         */
        nfdAppId: bigint | number
      }
      argsTuple: [nfdAppId: bigint | number]
      returns: void
    }>
    & Record<'deleteListing(uint64)void' | 'deleteListing', {
      argsObj: {
        /**
         * The uint64 application ID of the NFD that will be deleted
         */
        nfdAppId: bigint | number
      }
      argsTuple: [nfdAppId: bigint | number]
      returns: void
    }>
    & Record<'setAdminToken(uint64)void' | 'setAdminToken', {
      argsObj: {
        /**
         * The uint64 asset ID of the ASA to be the admin token
         */
        asaId: bigint | number
      }
      argsTuple: [asaId: bigint | number]
      returns: void
    }>
    & Record<'createApplication()void' | 'createApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
    & Record<'updateApplication()void' | 'updateApplication', {
      argsObj: {
      }
      argsTuple: []
      returns: void
    }>
  /**
   * Defines the shape of the state of the application.
   */
  state: {
    global: {
      keys: {
        adminToken: bigint
      }
    }
  }
}

/**
 * Defines the possible abi call signatures.
 */
export type AlgoDirectorySignatures = keyof AlgoDirectoryTypes['methods']
/**
 * Defines the possible abi call signatures for methods that return a non-void value.
 */
export type AlgoDirectoryNonVoidMethodSignatures = keyof AlgoDirectoryTypes['methods'] extends infer T ? T extends keyof AlgoDirectoryTypes['methods'] ? MethodReturn<T> extends void ? never : T  : never : never
/**
 * Defines an object containing all relevant parameters for a single call to the contract.
 */
export type CallParams<TSignature extends AlgoDirectorySignatures> = Expand<
  Omit<AppClientMethodCallParams, 'method' | 'args' | 'onComplete'> &
    {
      /** The args for the ABI method call, either as an ordered array or an object */
      args: Expand<MethodArgs<TSignature>>
    }
>
/**
 * Maps a method signature from the AlgoDirectory smart contract to the method's arguments in either tuple or struct form
 */
export type MethodArgs<TSignature extends AlgoDirectorySignatures> = AlgoDirectoryTypes['methods'][TSignature]['argsObj' | 'argsTuple']
/**
 * Maps a method signature from the AlgoDirectory smart contract to the method's return type
 */
export type MethodReturn<TSignature extends AlgoDirectorySignatures> = AlgoDirectoryTypes['methods'][TSignature]['returns']

/**
 * Defines the shape of the keyed global state of the application.
 */
export type GlobalKeysState = AlgoDirectoryTypes['state']['global']['keys']


/**
 * Defines supported create method params for this smart contract
 */
export type AlgoDirectoryCreateCallParams =
  | Expand<CallParams<'createApplication'> & {method: 'createApplication'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
  | Expand<CallParams<'createApplication()void'> & {method: 'createApplication()void'} & {onComplete?: OnApplicationComplete.NoOpOC} & CreateSchema>
/**
 * Defines supported update method params for this smart contract
 */
export type AlgoDirectoryUpdateCallParams =
  | Expand<CallParams<'updateApplication'> & {method: 'updateApplication'}>
  | Expand<CallParams<'updateApplication()void'> & {method: 'updateApplication()void'}>
/**
 * Defines arguments required for the deploy method.
 */
export type AlgoDirectoryDeployParams = Expand<Omit<AppFactoryDeployParams, 'createParams' | 'updateParams' | 'deleteParams'> & {
  /**
   * Create transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  createParams?: AlgoDirectoryCreateCallParams
  /**
   * Update transaction parameters to use if a create needs to be issued as part of deployment; use `method` to define ABI call (if available) or leave out for a bare call (if available)
   */
  updateParams?: AlgoDirectoryUpdateCallParams
}>


/**
 * Exposes methods for constructing `AppClient` params objects for ABI calls to the AlgoDirectory smart contract
 */
export abstract class AlgoDirectoryParamsFactory {
  /**
   * Gets available create ABI call param factories
   */
  static get create() {
    return {
      _resolveByMethod<TParams extends AlgoDirectoryCreateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'createApplication':
          case 'createApplication()void':
            return AlgoDirectoryParamsFactory.create.createApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs create ABI call params for the AlgoDirectory smart contract using the createApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      createApplication(params: CallParams<'createApplication()void'> & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC}): AppClientMethodCallParams & AppClientCompilationParams & {onComplete?: OnApplicationComplete.NoOpOC} {
        return {
          ...params,
          method: 'createApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Gets available update ABI call param factories
   */
  static get update() {
    return {
      _resolveByMethod<TParams extends AlgoDirectoryUpdateCallParams & {method: string}>(params: TParams) {
        switch(params.method) {
          case 'updateApplication':
          case 'updateApplication()void':
            return AlgoDirectoryParamsFactory.update.updateApplication(params)
        }
        throw new Error(`Unknown ' + verb + ' method`)
      },

      /**
       * Constructs update ABI call params for the AlgoDirectory smart contract using the updateApplication()void ABI method
       *
       * @param params Parameters for the call
       * @returns An `AppClientMethodCallParams` object for the call
       */
      updateApplication(params: CallParams<'updateApplication()void'> & AppClientCompilationParams): AppClientMethodCallParams & AppClientCompilationParams {
        return {
          ...params,
          method: 'updateApplication()void' as const,
          args: Array.isArray(params.args) ? params.args : [],
        }
      },
    }
  }

  /**
   * Constructs a no op call for the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) ABI method
   *
   * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static createListing(params: CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.collateralPayment, params.args.nfdAppId, params.args.listingTags],
    }
  }
  /**
   * Constructs a no op call for the refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) ABI method
   *
   * Refreshes a listing in the directory and updates its last touched timestamp.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static refreshListing(params: CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdAppId],
    }
  }
  /**
   * Constructs a no op call for the abandonListing(uint64)void ABI method
   *
   * Abandons a listing in the directory and returns the vouched collateral.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static abandonListing(params: CallParams<'abandonListing(uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'abandonListing(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdAppId],
    }
  }
  /**
   * Constructs a no op call for the deleteListing(uint64)void ABI method
   *
   * Deletes a listing from the directory & sends the collateral to the fee sink.
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static deleteListing(params: CallParams<'deleteListing(uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'deleteListing(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.nfdAppId],
    }
  }
  /**
   * Constructs a no op call for the setAdminToken(uint64)void ABI method
   *
   * Stores an ASA ID in global state that will control administration rights
   *
   * @param params Parameters for the call
   * @returns An `AppClientMethodCallParams` object for the call
   */
  static setAdminToken(params: CallParams<'setAdminToken(uint64)void'> & CallOnComplete): AppClientMethodCallParams & CallOnComplete {
    return {
      ...params,
      method: 'setAdminToken(uint64)void' as const,
      args: Array.isArray(params.args) ? params.args : [params.args.asaId],
    }
  }
}

/**
 * A factory to create and deploy one or more instance of the AlgoDirectory smart contract and to create one or more app clients to interact with those (or other) app instances
 */
export class AlgoDirectoryFactory {
  /**
   * The underlying `AppFactory` for when you want to have more flexibility
   */
  public readonly appFactory: AppFactory

  /**
   * Creates a new instance of `AlgoDirectoryFactory`
   *
   * @param params The parameters to initialise the app factory with
   */
  constructor(params: Expand<Omit<AppFactoryParams, 'appSpec'>>) {
    this.appFactory = new AppFactory({
      ...params,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Returns a new `AppClient` client for an app instance of the given ID.
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public getAppClientById(params: Expand<Omit<AppClientParams, 'algorand' | 'appSpec'>>) {
    return new AlgoDirectoryClient(this.appFactory.getAppClientById(params))
  }
  
  /**
   * Returns a new `AppClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   *
   * Automatically populates appName, defaultSender and source maps from the factory
   * if not specified in the params.
   * @param params The parameters to create the app client
   * @returns The `AppClient`
   */
  public async getAppClientByCreatorAddressAndName(
    params: Expand<Omit<AppClientParams, 'algorand' | 'appSpec' | 'appId'> & ResolveAppClientByCreatorAndName>,
  ) {
    return new AlgoDirectoryClient(await this.appFactory.getAppClientByCreatorAddressAndName(params))
  }

  /**
   * Idempotently deploys the AlgoDirectory smart contract.
   *
   * @param params The arguments for the contract calls and any additional parameters for the call
   * @returns The deployment result
   */
  public async deploy(params: AlgoDirectoryDeployParams = {}) {
    const result = await this.appFactory.deploy({
      ...params,
      createParams: params.createParams?.method ? AlgoDirectoryParamsFactory.create._resolveByMethod(params.createParams) : params.createParams,
      updateParams: params.updateParams?.method ? AlgoDirectoryParamsFactory.update._resolveByMethod(params.updateParams) : params.updateParams,
    })
    return { result: result.result, app: new AlgoDirectoryClient(result.app) }
  }

  /**
   * Get parameters to define transactions to the current app
   */
  readonly params = (($this) => {
    return {
      /**
       * Gets available create methods
       */
      get create() {
        return {
          /**
           * Creates a new instance of the AlgoDirectory smart contract using the createApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The create params
           */
          createApplication(params: Expand<CallParams<'createApplication()void'> & AppClientCompilationParams & CreateSchema & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
            return $this.appFactory.params.create(AlgoDirectoryParamsFactory.create.createApplication(params))
          },
        }
      },

      /**
       * Gets available deployUpdate methods
       */
      get deployUpdate() {
        return {
          /**
           * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The deployUpdate params
           */
          updateApplication(params: Expand<CallParams<'updateApplication()void'> & AppClientCompilationParams> = {args: []}) {
            return $this.appFactory.params.deployUpdate(AlgoDirectoryParamsFactory.update.updateApplication(params))
          },
        }
      },

    }
  })(this)

  /**
   * Send calls to the current app
   */
  readonly send = (($this) => {
    return {
      /**
       * Gets available create methods
       */
      get create() {
        return {
          /**
           * Creates a new instance of the AlgoDirectory smart contract using an ABI method call using the createApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The create result
           */
          async createApplication(params: Expand<CallParams<'createApplication()void'> & AppClientCompilationParams & CreateSchema & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}> = {args: []}) {
            const result = await $this.appFactory.create(AlgoDirectoryParamsFactory.create.createApplication(params))
            return { result: { ...result.result, return: result.result.return as undefined | MethodReturn<'createApplication()void'> }, app: new AlgoDirectoryClient(result.app) }
          },
        }
      },

    }
  })(this)

}
/**
 * A client to make calls to the AlgoDirectory smart contract
 */
export class AlgoDirectoryClient {
  /**
   * The underlying `AppClient` for when you want to have more flexibility
   */
  public readonly appClient: AppClient

  /**
   * Creates a new instance of `AlgoDirectoryClient`
   *
   * @param appClient An `AppClient` instance which has been created with the AlgoDirectory app spec
   */
  constructor(appClient: AppClient)
  /**
   * Creates a new instance of `AlgoDirectoryClient`
   *
   * @param params The parameters to initialise the app client with
   */
  constructor(params: Expand<Omit<AppClientParams, 'appSpec'>>)
  constructor(appClientOrParams: AppClient | Expand<Omit<AppClientParams, 'appSpec'>>) {
    this.appClient = appClientOrParams instanceof AppClient ? appClientOrParams : new AppClient({
      ...appClientOrParams,
      appSpec: APP_SPEC,
    })
  }
  
  /**
   * Checks for decode errors on the given return value and maps the return value to the return type for the given method
   * @returns The typed return value or undefined if there was no value
   */
  decodeReturnValue<TSignature extends AlgoDirectoryNonVoidMethodSignatures>(method: TSignature, returnValue: ABIReturn | undefined) {
    return returnValue !== undefined ? getArc56ReturnValue<MethodReturn<TSignature>>(returnValue, this.appClient.getABIMethod(method), APP_SPEC.structs) : undefined
  }
  
  /**
   * Returns a new `AlgoDirectoryClient` client, resolving the app by creator address and name
   * using AlgoKit app deployment semantics (i.e. looking for the app creation transaction note).
   * @param params The parameters to create the app client
   */
  public static async fromCreatorAndName(params: Expand<Omit<ResolveAppClientByCreatorAndName, 'appSpec'>>): Promise<AlgoDirectoryClient> {
    return new AlgoDirectoryClient(await AppClient.fromCreatorAndName({...params, appSpec: APP_SPEC}))
  }
  
  /**
   * Returns an `AlgoDirectoryClient` instance for the current network based on
   * pre-determined network-specific app IDs specified in the ARC-56 app spec.
   *
   * If no IDs are in the app spec or the network isn't recognised, an error is thrown.
   * @param params The parameters to create the app client
   */
  static async fromNetwork(
    params: Expand<Omit<AppClientParams, 'appSpec' | 'appId'>>
  ): Promise<AlgoDirectoryClient> {
    return new AlgoDirectoryClient(await AppClient.fromNetwork({...params, appSpec: APP_SPEC}))
  }

  /**
   * Get parameters to define transactions to the current app
   */
  readonly params = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The update params
           */
          updateApplication(params: Expand<CallParams<'updateApplication()void'> & AppClientCompilationParams> = {args: []}) {
            return $this.appClient.params.update(AlgoDirectoryParamsFactory.update.updateApplication(params))
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.params.bare.clearState(params)
      },

      /**
       * Makes a call to the AlgoDirectory smart contract using the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      createListing(params: Expand<CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(AlgoDirectoryParamsFactory.createListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Refreshes a listing in the directory and updates its last touched timestamp.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      refreshListing(params: Expand<CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(AlgoDirectoryParamsFactory.refreshListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the abandonListing(uint64)void ABI method.
       *
       * Abandons a listing in the directory and returns the vouched collateral.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      abandonListing(params: Expand<CallParams<'abandonListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(AlgoDirectoryParamsFactory.abandonListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the deleteListing(uint64)void ABI method.
       *
       * Deletes a listing from the directory & sends the collateral to the fee sink.
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      deleteListing(params: Expand<CallParams<'deleteListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(AlgoDirectoryParamsFactory.deleteListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the setAdminToken(uint64)void ABI method.
       *
       * Stores an ASA ID in global state that will control administration rights
       *
       * @param params The params for the smart contract call
       * @returns The call params
       */
      setAdminToken(params: Expand<CallParams<'setAdminToken(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.params.call(AlgoDirectoryParamsFactory.setAdminToken(params))
      },
    }
  })(this)

  /**
   * Get parameters to define transactions to the current app
   */
  readonly transactions = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The update transaction
           */
          updateApplication(params: Expand<CallParams<'updateApplication()void'> & AppClientCompilationParams> = {args: []}) {
            return $this.appClient.transactions.update(AlgoDirectoryParamsFactory.update.updateApplication(params))
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams>) {
        return $this.appClient.transactions.bare.clearState(params)
      },

      /**
       * Makes a call to the AlgoDirectory smart contract using the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      createListing(params: Expand<CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(AlgoDirectoryParamsFactory.createListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Refreshes a listing in the directory and updates its last touched timestamp.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      refreshListing(params: Expand<CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(AlgoDirectoryParamsFactory.refreshListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the abandonListing(uint64)void ABI method.
       *
       * Abandons a listing in the directory and returns the vouched collateral.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      abandonListing(params: Expand<CallParams<'abandonListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(AlgoDirectoryParamsFactory.abandonListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the deleteListing(uint64)void ABI method.
       *
       * Deletes a listing from the directory & sends the collateral to the fee sink.
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      deleteListing(params: Expand<CallParams<'deleteListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(AlgoDirectoryParamsFactory.deleteListing(params))
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the setAdminToken(uint64)void ABI method.
       *
       * Stores an ASA ID in global state that will control administration rights
       *
       * @param params The params for the smart contract call
       * @returns The call transaction
       */
      setAdminToken(params: Expand<CallParams<'setAdminToken(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        return $this.appClient.transactions.call(AlgoDirectoryParamsFactory.setAdminToken(params))
      },
    }
  })(this)

  /**
   * Send calls to the current app
   */
  readonly send = (($this) => {
    return {
      /**
       * Gets available update methods
       */
      get update() {
        return {
          /**
           * Updates an existing instance of the AlgoDirectory smart contract using the updateApplication()void ABI method.
           *
           * @param params The params for the smart contract call
           * @returns The update result
           */
          async updateApplication(params: Expand<CallParams<'updateApplication()void'> & AppClientCompilationParams & ExecuteParams> = {args: []}) {
            const result = await $this.appClient.send.update(AlgoDirectoryParamsFactory.update.updateApplication(params))
            return {...result, return: result.return as undefined | MethodReturn<'updateApplication()void'>}
          },
        }
      },

      /**
       * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
       *
       * @param params The params for the bare (non-ABI) call
       * @returns The clearState result
       */
      clearState(params?: Expand<AppClientBareCallParams & ExecuteParams>) {
        return $this.appClient.send.bare.clearState(params)
      },

      /**
       * Makes a call to the AlgoDirectory smart contract using the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async createListing(params: Expand<CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(AlgoDirectoryParamsFactory.createListing(params))
        return {...result, return: result.return as undefined | MethodReturn<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'>}
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) ABI method.
       *
       * Refreshes a listing in the directory and updates its last touched timestamp.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async refreshListing(params: Expand<CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(AlgoDirectoryParamsFactory.refreshListing(params))
        return {...result, return: result.return as undefined | MethodReturn<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'>}
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the abandonListing(uint64)void ABI method.
       *
       * Abandons a listing in the directory and returns the vouched collateral.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async abandonListing(params: Expand<CallParams<'abandonListing(uint64)void'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(AlgoDirectoryParamsFactory.abandonListing(params))
        return {...result, return: result.return as undefined | MethodReturn<'abandonListing(uint64)void'>}
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the deleteListing(uint64)void ABI method.
       *
       * Deletes a listing from the directory & sends the collateral to the fee sink.
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async deleteListing(params: Expand<CallParams<'deleteListing(uint64)void'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(AlgoDirectoryParamsFactory.deleteListing(params))
        return {...result, return: result.return as undefined | MethodReturn<'deleteListing(uint64)void'>}
      },
      /**
       * Makes a call to the AlgoDirectory smart contract using the setAdminToken(uint64)void ABI method.
       *
       * Stores an ASA ID in global state that will control administration rights
       *
       * @param params The params for the smart contract call
       * @returns The call result
       */
      async setAdminToken(params: Expand<CallParams<'setAdminToken(uint64)void'> & ExecuteParams & {onComplete?: OnApplicationComplete.NoOpOC}>) {
        const result = await $this.appClient.send.call(AlgoDirectoryParamsFactory.setAdminToken(params))
        return {...result, return: result.return as undefined | MethodReturn<'setAdminToken(uint64)void'>}
      },
    }
  })(this)

  /**
   * Methods to access state for the current AlgoDirectory app
   */
  state = {
    /**
     * Methods to access global state for the current AlgoDirectory app
     */
    global: {
      /**
       * Get all current keyed values from global state
       */
      getAll: async (): Promise<Partial<Expand<GlobalKeysState>>> => {
        const result = await this.appClient.state.global.getAll()
        return {
          adminToken: result.adminToken,
        }
      },
      /**
       * Get the current value of the adminToken key in global state
       */
      adminToken: async (): Promise<bigint | undefined> => { return (await this.appClient.state.global.getValue("adminToken")) as bigint | undefined },
    },
  }

  public newGroup(): AlgoDirectoryComposer {
    const client = this
    const composer = client.appClient.newGroup()
    const resultMappers: Array<undefined | ((x: ABIReturn | undefined) => any)> = []
    return {
      /**
       * Add a createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) method call against the AlgoDirectory contract
       */
      createListing(params: CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        composer.addAppCallMethodCall(client.params.createListing(params))
        resultMappers.push((v) => client.decodeReturnValue('createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)', v))
        return this
      },
      /**
       * Add a refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) method call against the AlgoDirectory contract
       */
      refreshListing(params: CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        composer.addAppCallMethodCall(client.params.refreshListing(params))
        resultMappers.push((v) => client.decodeReturnValue('refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)', v))
        return this
      },
      /**
       * Add a abandonListing(uint64)void method call against the AlgoDirectory contract
       */
      abandonListing(params: CallParams<'abandonListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        composer.addAppCallMethodCall(client.params.abandonListing(params))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a deleteListing(uint64)void method call against the AlgoDirectory contract
       */
      deleteListing(params: CallParams<'deleteListing(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        composer.addAppCallMethodCall(client.params.deleteListing(params))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a setAdminToken(uint64)void method call against the AlgoDirectory contract
       */
      setAdminToken(params: CallParams<'setAdminToken(uint64)void'> & {onComplete?: OnApplicationComplete.NoOpOC}) {
        composer.addAppCallMethodCall(client.params.setAdminToken(params))
        resultMappers.push(undefined)
        return this
      },
      /**
       * Add a clear state call to the AlgoDirectory contract
       */
      clearState(params: AppClientBareCallParams) {
        composer.addAppCall(client.params.clearState(params))
        return this
      },
      addTransaction(txn: Transaction, signer?: TransactionSigner) {
        composer.addTransaction(txn, signer)
        return this
      },
      composer() {
        return composer
      },
      async simulate(options?: SimulateOptions) {
        const result = await composer.simulate(options)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      },
      async execute(params?: ExecuteParams) {
        const result = await composer.execute(params)
        return {
          ...result,
          returns: result.returns?.map((val, i) => resultMappers[i] !== undefined ? resultMappers[i]!(val) : val.returnValue)
        }
      }
    } as unknown as AlgoDirectoryComposer
  }
}
export type AlgoDirectoryComposer<TReturns extends [...any[]] = []> = {
  /**
   * Calls the createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string) ABI method.
   *
   * Creates a listing in the directory by vouching for an NFD root or segment of directory.algo.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  createListing(params?: CallParams<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'>): AlgoDirectoryComposer<[...TReturns, MethodReturn<'createListing(pay,uint64,byte[13])(uint64,uint64,uint64,byte[13],string)'> | undefined]>

  /**
   * Calls the refreshListing(uint64)(uint64,uint64,uint64,byte[13],string) ABI method.
   *
   * Refreshes a listing in the directory and updates its last touched timestamp.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  refreshListing(params?: CallParams<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'>): AlgoDirectoryComposer<[...TReturns, MethodReturn<'refreshListing(uint64)(uint64,uint64,uint64,byte[13],string)'> | undefined]>

  /**
   * Calls the abandonListing(uint64)void ABI method.
   *
   * Abandons a listing in the directory and returns the vouched collateral.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  abandonListing(params?: CallParams<'abandonListing(uint64)void'>): AlgoDirectoryComposer<[...TReturns, MethodReturn<'abandonListing(uint64)void'> | undefined]>

  /**
   * Calls the deleteListing(uint64)void ABI method.
   *
   * Deletes a listing from the directory & sends the collateral to the fee sink.
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  deleteListing(params?: CallParams<'deleteListing(uint64)void'>): AlgoDirectoryComposer<[...TReturns, MethodReturn<'deleteListing(uint64)void'> | undefined]>

  /**
   * Calls the setAdminToken(uint64)void ABI method.
   *
   * Stores an ASA ID in global state that will control administration rights
   *
   * @param args The arguments for the contract call
   * @param params Any additional parameters for the call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  setAdminToken(params?: CallParams<'setAdminToken(uint64)void'>): AlgoDirectoryComposer<[...TReturns, MethodReturn<'setAdminToken(uint64)void'> | undefined]>

  /**
   * Makes a clear_state call to an existing instance of the AlgoDirectory smart contract.
   *
   * @param args The arguments for the bare call
   * @returns The typed transaction composer so you can fluently chain multiple calls or call execute to execute all queued up transactions
   */
  clearState(params?: AppClientBareCallParams): AlgoDirectoryComposer<[...TReturns, undefined]>

  /**
   * Adds a transaction to the composer
   *
   * @param txn A transaction to add to the transaction group
   * @param signer The optional signer to use when signing this transaction.
   */
  addTransaction(txn: Transaction, signer?: TransactionSigner): AlgoDirectoryComposer<TReturns>
  /**
   * Returns the underlying AtomicTransactionComposer instance
   */
  composer(): AlgoKitComposer
  /**
   * Simulates the transaction group and returns the result
   */
  simulate(options?: SimulateOptions): Promise<AlgoDirectoryComposerResults<TReturns> & { simulateResponse: SimulateResponse }>
  /**
   * Executes the transaction group and returns the results
   */
  execute(params?: ExecuteParams): Promise<AlgoDirectoryComposerResults<TReturns>>
}
export type AlgoDirectoryComposerResults<TReturns extends [...any[]]> = Expand<SendAtomicTransactionComposerResults & {
  returns: TReturns
}>

